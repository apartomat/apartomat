extend type Query {
    album(id: String!): AlbumResult!
}

union AlbumResult = Album | Forbidden | NotFound | ServerError

type Album {
    id: String!
    name: String!
    version: Int!
    project: AlbumProjectResult! @goField(forceResolver: true)
    settings: AlbumSettings!
    pages: AlbumPagesResult! @goField(forceResolver: true)
    file: AlbumRecentFileResult @goField(forceResolver: true)
    cover: AlbumCoverResult! @goField(forceResolver: true)
}

union AlbumProjectResult = Project | Forbidden | NotFound | ServerError

type AlbumSettings {
    pageSize: PageSize!
    pageOrientation: PageOrientation!
}

enum PageSize {
    A4
    A3
}

enum PageOrientation {
    PORTRAIT
    LANDSCAPE
}

union AlbumPagesResult = AlbumPages | ServerError

type AlbumPages {
    items: [AlbumPage!]!
}

interface AlbumPage {
    id: String!
    number: Int!
    rotate: Float!
    svg: AlbumPageSvgResult! @deprecated(reason: "Render page on frontend instead.")
}

union AlbumPageSvgResult = Svg | NotFound | ServerError

type Svg {
    svg: String!
}

type AlbumPageCover implements AlbumPage {
    id: String!
    number: Int!
    rotate: Float!
    svg: AlbumPageSvgResult! @goField(forceResolver: true)
    cover: Cover!
}

union Cover = SplitCover | CoverUploaded

type SplitCover {
    title: String!
    subtitle: String
    imgSrc: String!
    qrCodeSrc: String
    city: String
    year: Int
    variant: SplitCoverVariant!
}

enum SplitCoverVariant {
    IMAGE_ON_THE_LEFT
    IMAGE_ON_THE_RIGHT
}

type CoverUploaded {
    file: CoverFileResult! @goField(forceResolver: true)
}

union CoverFileResult = File | NotFound | Forbidden | ServerError

type AlbumPageVisualization implements AlbumPage {
    id: String!
    number: Int!
    rotate: Float!
    svg: AlbumPageSvgResult! @goField(forceResolver: true)
    visualization: AlbumPageVisualizationResult! @goField(forceResolver: true)
}

union AlbumPageVisualizationResult = Visualization | NotFound | ServerError

union AlbumRecentFileResult = AlbumFile | NotFound | Forbidden | ServerError

type AlbumFile {
    id: String!
    status: AlbumFileStatus!
    version: Int!
    file: File
    generatingStartedAt: Time
    generatingDoneAt: Time
}

enum AlbumFileStatus {
    NEW
    GENERATING_IN_PROGRESS
    GENERATING_DONE
}

union AlbumCoverResult = File | NotFound | Forbidden | ServerError

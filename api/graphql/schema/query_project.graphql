union ProjectResult = Project | NotFound | Forbidden | ServerError

type Project {
    id: String!
    title: String!
    status: ProjectStatus!
    startAt: Time
    endAt: Time
    contacts: ProjectContacts!
    houses: ProjectHouses!
    visualizations: ProjectVisualizations!
    files: ProjectFiles!
}

enum ProjectStatus {
    NEW
    IN_PROGRESS
    DONE
    CANCELED
}

type ProjectContacts {
    list(filter: ProjectContactsFilter! = {} limit: Int! = 10 offset: Int! = 0): ProjectContactsListResult!
    total(filter: ProjectContactsFilter! = {}): ProjectContactsTotalResult!
}

input ProjectContactsFilter {
    type: [ContactType!]
}

union ProjectContactsListResult = ProjectContactsList | Forbidden | ServerError

type ProjectContactsList {
    items: [Contact!]!
}

union ProjectContactsTotalResult = ProjectContactsTotal | Forbidden | ServerError

type ProjectContactsTotal {
    total: Int!
}

enum ContactType {
    INSTAGRAM
    PHONE
    EMAIL
    WHATSAPP
    TELEGRAM
    UNKNOWN
}

type Contact {
    id: String!
    fullName: String!
    photo: String!
    details:   [ContactDetails!]!
    createdAt:  Time!
    modifiedAt: Time!
}

type ContactDetails {
    type: ContactType!
    value: String!
}

type ProjectHouses {
    list(filter: ProjectHousesFilter! = {} limit: Int! = 10 offset: Int! = 0): ProjectHousesListResult!
    total(filter: ProjectHousesFilter! = {}): ProjectHousesTotalResult!
}

input ProjectHousesFilter {
    ID: [String!]
}

union ProjectHousesListResult = ProjectHousesList | Forbidden | ServerError

type ProjectHousesList {
    items: [House!]!
}

union ProjectHousesTotalResult = ProjectHousesTotal | Forbidden | ServerError

type ProjectHousesTotal {
    total: Int!
}

type House {
    id: String!
    city: String!
    address: String!
    housingComplex: String!
    createdAt:  Time!
    modifiedAt: Time!
    rooms: HouseRooms!
}

type HouseRooms {
    list(limit: Int! = 10 offset: Int! = 0): HouseRoomsListResult!
}

union HouseRoomsListResult = HouseRoomsList | Forbidden | ServerError

type HouseRoomsList {
    items: [Room!]!
}

type Room {
    id: String!
    name: String!
    square: Float
    level: Int
    createdAt:  Time!
    modifiedAt: Time!
}

type ProjectVisualizations {
    list(filter: ProjectVisualizationsListFilter! = {} limit: Int! = 10 offset: Int! = 0): ProjectVisualizationsListResult!
    total(filter: ProjectVisualizationsListFilter! = {}): ProjectVisualizationsTotalResult!
}

input ProjectVisualizationsListFilter {
    roomID: [String!]
}

union ProjectVisualizationsListResult = ProjectVisualizationsList | Forbidden | ServerError

type ProjectVisualizationsList {
    items: [Visualization!]!
}

union ProjectVisualizationsTotalResult = ProjectVisualizationsTotal | Forbidden | ServerError

type ProjectVisualizationsTotal {
    total: Int!
}

type Visualization {
    id: String!
    name: String!
    description: String!
    version: Int!
    createdAt:  Time!
    modifiedAt: Time!
    file: ProjectFile!
    room: Room
}

type ProjectFiles {
    list(filter: ProjectFilesListFilter! = {} limit: Int! = 10 offset: Int! = 0): ProjectFilesListResult!
    total(filter: ProjectFilesListFilter! = {}): ProjectFilesTotalResult!
}

input ProjectFilesListFilter {
    type: [ProjectFileType!]
}

enum ProjectFileType {
    NONE
    VISUALIZATION
}

union ProjectFilesListResult = ProjectFilesList | Forbidden | ServerError

type ProjectFilesList {
    items: [ProjectFile!]!
}

union ProjectFilesTotalResult = ProjectFilesTotal | Forbidden | ServerError

type ProjectFilesTotal {
    total: Int!
}

type ProjectFile {
    id: String!
    name: String!
    url: Url!
    type: ProjectFileType!
    mimeType: String!
}
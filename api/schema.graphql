schema {
    query: Query
    mutation: Mutation
}

type Query {
    profile: UserProfileResult!
    shoppingList: ShoppingList!
}

interface Error {
    message: String!
}

type ServerError implements Error {
    message: String!
}

union UserProfileResult = UserProfile | Forbidden | ServerError

type UserProfile {
    id: Int!
    email: String!
    gravatar: Gravatar
    defaultWorkspace: Workspace!
}

type Gravatar {
    url: String!
}

type Forbidden implements Error {
    message: String!
}

type ShoppingList {
    findProductOnPage(url: String!): Product
}

type Product {
    name: String!
    description: String!
    image: String!
}

type Mutation {
    loginByEmail(email: String!, workspaceName: String! = "Workspace"): LoginByEmailResult!
    confirmLogin(token: String!): ConfirmLoginResult!
}

union LoginByEmailResult = CheckEmail | InvalidEmail | ServerError

type CheckEmail {
    email: String!
}

type InvalidEmail implements Error {
    message: String!
}

union ConfirmLoginResult = LoginConfirmed | InvalidToken | ExpiredToken | ServerError

type LoginConfirmed {
    token: String!
}

type InvalidToken implements Error {
    message: String!
}

type ExpiredToken implements Error {
    message: String!
}

type Workspace {
    id: Int!
    name: String!
}

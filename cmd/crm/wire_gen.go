// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"crypto/ed25519"
	"database/sql"
	"fmt"
	"github.com/apartomat/apartomat/internal/crm"
	"github.com/apartomat/apartomat/internal/crm/auth/paseto"
	"github.com/apartomat/apartomat/internal/crm/image"
	"github.com/apartomat/apartomat/internal/crm/image/minio"
	"github.com/apartomat/apartomat/internal/crm/mail"
	"github.com/apartomat/apartomat/internal/crm/mail/smtp"
	bun2 "github.com/apartomat/apartomat/internal/pkg/bun"
	"github.com/apartomat/apartomat/internal/pkg/go-pg"
	postgres5 "github.com/apartomat/apartomat/internal/store/albumfiles/postgres"
	postgres4 "github.com/apartomat/apartomat/internal/store/albums/postgres"
	postgres6 "github.com/apartomat/apartomat/internal/store/contacts/postgres"
	postgres8 "github.com/apartomat/apartomat/internal/store/files/postgres"
	postgres3 "github.com/apartomat/apartomat/internal/store/houses/postgres"
	postgres7 "github.com/apartomat/apartomat/internal/store/projectpages/postgres"
	postgres2 "github.com/apartomat/apartomat/internal/store/projects/postgres"
	postgres9 "github.com/apartomat/apartomat/internal/store/rooms/postgres"
	postgres10 "github.com/apartomat/apartomat/internal/store/users/postgres"
	postgres11 "github.com/apartomat/apartomat/internal/store/visualizations/postgres"
	postgres12 "github.com/apartomat/apartomat/internal/store/workspaces/postgres"
	"github.com/apartomat/apartomat/internal/store/workspaceusers/postgres"
	"github.com/go-pg/pg/v10"
	"github.com/google/wire"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dialect/pgdialect"
	"github.com/uptrace/bun/driver/pgdriver"
	"log/slog"
	"os"
)

// Injectors from wire.go:

func InitializeCRM(ctx context.Context) (*crm.CRM, error) {
	db, err := ProvideBun()
	if err != nil {
		return nil, err
	}
	crmParams := params()
	privateKey, err := ProvidePrivateKey()
	if err != nil {
		return nil, err
	}
	authTokenIssuerVerifier := paseto.NewAuthTokenIssuerVerifier(privateKey)
	confirmEmailTokenIssuerVerifier := paseto.NewConfirmEmailTokenIssuerVerifier(privateKey)
	confirmEmailPINTokenIssuerVerifier := paseto.NewConfirmEmailPINTokenIssuerVerifier(privateKey)
	inviteTokenIssuerVerifier := paseto.NewInviteTokenIssuerVerifier(privateKey)
	sender, err := ProvideMailSender()
	if err != nil {
		return nil, err
	}
	factory, err := ProvideMailFactory()
	if err != nil {
		return nil, err
	}
	uploader, err := ProvideUploader()
	if err != nil {
		return nil, err
	}
	store := postgres.NewStore(db)
	postgresStore := postgres2.NewStore(db)
	store2 := postgres3.NewStore(db)
	acl := crm.NewAcl(store, postgresStore, store2)
	store3 := postgres4.NewStore(db)
	store4 := postgres5.NewStore(db)
	pgDB, err := ProvidePg(ctx)
	if err != nil {
		return nil, err
	}
	store5 := postgres6.NewStore(pgDB)
	store6 := postgres7.NewStore(db)
	store7 := postgres8.NewStore(db)
	store8 := postgres9.NewStore(db)
	store9 := postgres10.NewStore(pgDB)
	store10 := postgres11.NewStore(db)
	store11 := postgres12.NewStore(pgDB)
	crmCRM := crm.NewCRM(db, crmParams, authTokenIssuerVerifier, authTokenIssuerVerifier, confirmEmailTokenIssuerVerifier, confirmEmailTokenIssuerVerifier, confirmEmailPINTokenIssuerVerifier, confirmEmailPINTokenIssuerVerifier, inviteTokenIssuerVerifier, inviteTokenIssuerVerifier, sender, factory, uploader, acl, store3, store4, store5, store2, postgresStore, store6, store7, store8, store9, store10, store11, store)
	return crmCRM, nil
}

// wire.go:

func ProvidePrivateKey() (ed25519.PrivateKey, error) {
	privateKey, err := readPrivateKeyFromFile("apartomat.key")
	if err != nil {
		return nil, fmt.Errorf("cant read private key from file: %w", err)
	}

	return privateKey, nil
}

func ProvideBun() (*bun.DB, error) {
	var (
		sqldb = sql.OpenDB(pgdriver.NewConnector(pgdriver.WithDSN(os.Getenv("POSTGRES_DSN"))))
		bundb = bun.NewDB(sqldb, pgdialect.New())
	)

	if err := bundb.Ping(); err != nil {
		return nil, fmt.Errorf("can't connect to database: %w", err)
	}

	bundb.AddQueryHook(bun2.NewLogQueryHook(slog.Default()))
	bundb.AddQueryHook(bun2.NewQueryLatencyHook(observeSql))

	return bundb, nil
}

func ProvidePg(ctx context.Context) (*pg.DB, error) {
	pgopts, err := pg.ParseURL(os.Getenv("POSTGRES_DSN"))
	if err != nil {
		return nil, fmt.Errorf("can't parse POSTGRES_DSN: %w", err)
	}

	db := pg.Connect(pgopts)

	db.AddQueryHook(go_pg.NewLogQueryHook(slog.Default()))
	db.AddQueryHook(go_pg.NewQueryLatencyHook(observeSql))

	if err := db.Ping(go_pg.WithQueryContext(ctx, "ping")); err != nil {
		return nil, fmt.Errorf("can't connect to database: %w", err)
	}

	return db, nil
}

func ProvideUploader() (image.Uploader, error) {
	return minio.NewUploader("apartomat"), nil
}

func ProvideMailFactory() (*mail.Factory, error) {
	return mail.NewFactory(os.Getenv("BASE_URL"), os.Getenv("MAIL_FROM")), nil
}

func ProvideMailSender() (mail.Sender, error) {
	return smtp.NewMailSender(smtp.Config{
		Addr:     os.Getenv("SMTP_ADDR"),
		User:     os.Getenv("SMTP_USER"),
		Password: os.Getenv("SMTP_PASSWORD"),
	}), nil
}

var StoreSet = wire.NewSet(postgres5.Set, postgres4.Set, postgres6.Set, postgres8.Set, postgres3.Set, postgres7.Set, postgres2.Set, postgres9.Set, postgres10.Set, postgres11.Set, postgres12.Set, postgres.Set)
